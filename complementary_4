//code to interface two 6050 to arduii
// Arduino Wire library is required if I2Cdev I2CDEV_ARDUINO_WIRE n implementation
// is used in I2Cdev.h
#include <Wire.h>

// I2Cdev and MPU6050 must be installed as libraries, or else the .cpp/.h files
// for both classes must be in the include path of your project
#include "I2Cdev.h"
#include "MPU6050.h"

// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
//MPU6050 accelgyro;
MPU6050 accelgyroIC1(0x68);
MPU6050 accelgyroIC2(0x69);

#define FREQ  30.0 

int16_t ax1, ay1, az1, gyrX2, gyrY2, gyrZ2, gyrX1, gyrY1, gyrZ1;
double gx1, gy1, gz1;

int16_t ax2, ay2, az2;
double gx2, gy2, gz2;

#define LED_PIN 13
bool blinkState = false;

void setup() 
{
    // join I2C bus (I2Cdev library doesn't do this automatically)
    Wire.begin();

    // initialize serial communication
    // (38400 chosen because it works as well at 8MHz as it does at 16MHz,but
    // it's really up to you depending on your project)
    Serial.begin(38400);

    // initialize device
    Serial.println("Initializing I2C devices...");
    //accelgyro.initialize();
    accelgyroIC1.initialize();
    accelgyroIC2.initialize();

    // verify connection
    Serial.println("Testing device connections...");
    Serial.println(accelgyroIC1.testConnection() ? "MPU6050 #1 connection successful" : "MPU6050 connection failed");
    Serial.println(accelgyroIC2.testConnection() ? "MPU6050 #2 connection successful" : "MPU6050 connection failed");

    // configure Arduino LED for
    pinMode(LED_PIN, OUTPUT);
}

void loop() {
    // read raw accel/gyro measurements from device
    accelgyroIC1.getMotion6(&ax1, &ay1, &az1, &gyrX1, &gyrY1, &gyrZ1);
    accelgyroIC2.getMotion6(&ax2, &ay2, &az2, &gyrX2, &gyrY2, &gyrZ2);

    // these methods (and a few others) are also available
    //accelgyro.getAcceleration(&ax, &ay, &az);
    //accelgyro.getRotation(&gx, &gy, &gz);

    // display tab-separated accel/gyro x/y/z values
    
    ay1 = atan2(ax1, sqrt( pow(ay1, 2) + pow(az1, 2))) * 180 / M_PI;
    ax1 = atan2(ay1, sqrt( pow(ax1, 2) + pow(az1, 2))) * 180 / M_PI;
    
    ay2 = atan2(ax2, sqrt( pow(ay2, 2) + pow(az2, 2))) * 180 / M_PI;
    ax2 = atan2(ay2, sqrt( pow(ax2, 2) + pow(az2, 2))) * 180 / M_PI;
    
    gx1 = gx1 + gyrX1 / FREQ;
    gy1 = gy1 - gyrY1 / FREQ;
    gz1 = gz1 + gyrZ1 / FREQ;
    
    gx2 = gx2 + gyrX2 / FREQ;
    gy2 = gy2 - gyrY2 / FREQ;
    gz2 = gz2 + gyrZ2 / FREQ;

  // complementary filter
  // tau = DT*(A)/(1-A)
  // = 0.48sec
  gx1 = gx1 * 0.96 + ax1 * 0.04;
  gy1 = gy1 * 0.96 + ay1 * 0.04;
  
  gx2 = gx2 * 0.96 + ax2 * 0.04;
  gy2 = gy2 * 0.96 + ay2 * 0.04;
    
    Serial.println("Sensor 1:");
    Serial.println(gx1);
    Serial.println();
    Serial.println();
  Serial.println("Sensor 1:");
    Serial.println(gx2);
}
